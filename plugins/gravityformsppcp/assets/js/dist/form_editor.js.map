{"version":3,"file":"form_editor.js","mappings":"mCAOE,SAAUA,GACX,IAAMC,EAAwB,CAC7BC,cAAe,CACdC,mBAAoB,WACnB,OAAOH,EAAG,kDACX,EAEAI,kCAAmC,WAA+B,IAA7BC,EAAS,UAAH,8CAAUC,EAAO,uCAC3D,GAAOA,EAAP,CAIA,IAAIC,EAAgB,wXAAH,OAIqBD,EAAO,wDAe7C,OAVKD,IACJE,EAAgB,mOAAH,OAGJD,EAAO,+DAMVC,CArBP,CAsBD,IAIFC,OAAOP,sBAAwBA,CAC/B,CArCC,CAqCCQ,O,GC3CCC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,E,wBCtBe,SAASG,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAC/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAAKC,EAAKD,GAAKH,EAAIG,GACnE,OAAOC,CACT,C,ICEYvB,EAAGyB,E,OAFfjB,OAAOkB,iBAAmB,KAEd1B,EAsgBTS,OAtgBYgB,EAsgBJE,+BArgBVnB,OAAOkB,iBAAmB,WACzB,IAAME,EAAOC,KACPC,EAAoBL,EAAQM,UAAWC,KAAKC,IAElDL,EAAKM,eAAgB,EAErBN,EAAKO,oBAAqB,EAE1BP,EAAKQ,SAAiC,SAAtBX,EAAQY,UAExBT,EAAK1B,cAAgB,CACpBoC,WAA2C,SAA/BR,EAAkBS,SAC9BC,yBAAwB,SAAEC,GACzB,OAAoE,IAA7DzC,EAAE0C,QAASD,EAAOX,EAAkBa,kBAC5C,EACAC,WAA8C,SAAlCd,EAAkBe,aAG/BjB,EAAKkB,eAAiB,iCAEtBlB,EAAKmB,KAAO,WACXnB,EAAKoB,MAAQ/C,sBACb2B,EAAKqB,QAELrB,EAAKsB,iBACLtB,EAAKuB,wBACLvB,EAAKwB,uBACLxB,EAAKyB,8BACN,EAEAzB,EAAKqB,MAAQ,WACZK,MAAMC,UAAW,kCAAkC,YAA4B,IClC3CpC,EAAKG,EDkCsC,GClCtCA,EDkCsC,EEtCnE,SAAyBH,GACtC,GAAIK,MAAMgC,QAAQrC,GAAM,OAAOA,CACjC,CDGS,CAD8BA,EDkC2C,IGtCnE,SAA+BA,EAAKG,GACjD,IAAImC,EAAK,MAAQtC,EAAM,KAAO,oBAAsBuC,QAAUvC,EAAIuC,OAAOC,WAAaxC,EAAI,cAC1F,GAAI,MAAQsC,EAAI,CACd,IAAIG,EACFC,EACAC,EACAC,EACAC,EAAO,GACPC,GAAK,EACLC,GAAK,EACP,IACE,GAAIJ,GAAML,EAAKA,EAAGU,KAAKhD,IAAMiD,KAAM,IAAM9C,EAAG,CAC1C,GAAI+C,OAAOZ,KAAQA,EAAI,OACvBQ,GAAK,CACP,MAAO,OAASA,GAAML,EAAKE,EAAGK,KAAKV,IAAKa,QAAUN,EAAKO,KAAKX,EAAGnB,OAAQuB,EAAK3C,SAAWC,GAAI2C,GAAK,GASlG,CARE,MAAOO,GACPN,GAAK,EAAIL,EAAKW,CAChB,CAAE,QACA,IACE,IAAKP,GAAM,MAAQR,EAAW,SAAMM,EAAKN,EAAW,SAAKY,OAAON,KAAQA,GAAK,MAG/E,CAFE,QACA,GAAIG,EAAI,MAAML,CAChB,CACF,CACA,OAAOG,CACT,CACF,CFrBgC,CAAqB7C,EAAKG,IGJ3C,SAAqCmD,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,iBAANA,EAAgB,OAAO,EAAiBA,EAAGC,GACtD,IAAIC,EAAIN,OAAOO,UAAUC,SAASV,KAAKM,GAAGK,MAAM,GAAI,GAEpD,MADU,WAANH,GAAkBF,EAAEM,cAAaJ,EAAIF,EAAEM,YAAYC,MAC7C,QAANL,GAAqB,QAANA,EAAoBnD,MAAMyD,KAAKR,GACxC,cAANE,GAAqB,2CAA2CO,KAAKP,GAAW,EAAiBF,EAAGC,QAAxG,CALc,CAMhB,CHHgE,CAA2BvD,EAAKG,IILjF,WACb,MAAM,IAAI6D,UAAU,4IACtB,CJGsG,IDiCpCC,EAAK,KAAM,KACpE,WAAaA,EAAMC,MAEvBzD,EAAK0D,0BAA2BF,GAChCxD,EAAK2D,gCAAiCH,GAKN,KAA3B3D,EAAQ+D,gBACZC,YACC,WACCC,cACD,GACA,KAGF1F,EAAG,wCAAyC2F,IAAKP,EAAMQ,sBAAuBC,GAAI,UAAU,WAC3F,IAAMC,EAAY9F,EAAG6B,MAAO8D,MAC5B3F,EAAG,qCAAsC2F,IAAKG,GAE9CC,iBAAkB,uBAAwBD,EAC3C,IAEA9F,EAAG,2BAA4BgG,KAAM,UAAWZ,EAAMa,sBAAuBJ,GAAI,UAAU,WAC1FE,iBAAkB,uBAAwB/F,EAAG,2BAA4BkG,GAAI,YAC9E,IAEAlG,EAAG,+BAAgC6F,GAAI,uBAAwB,sBAAsB,WACpF,IAAMM,EAAUnG,EAAG6B,MAAOuE,QAAS,0BAA2BC,KAAM,aAEnB,IAA5CrG,EAAG6B,MAAOyE,KAAM,MAAOC,QAAS,OACpCvG,EAAG,UAAYmG,EAAQtB,WAAW2B,QAAS,IAAK,MAAQC,KAAM5E,KAAKY,MAErE,IAGAzC,EAAG,8BAA+B0G,MAAM,SAAUpF,EAAGqF,GACP,QAAxC3G,EAAG2G,GAAOC,SAAU,SAAUjB,OAClC3F,EAAG2G,GAAOE,MAEZ,IAEAjF,EAAKkF,0BAA2B1B,EAAM2B,SAAS,GAE/C/G,EAAG,mCAAoCgG,KAAM,UAAWZ,EAAM4B,uBAAwBnB,GAAI,UAAU,WACnGE,iBAAkB,wBAAyB/F,EAAG,mCAAoCkG,GAAI,aACtFtE,EAAK0D,0BAA2BF,EACjC,KAEAxD,EAAKM,eAAgB,CAEvB,IAEAoB,MAAM2D,UAAW,wCAAwC,SAAUC,EAAQ7B,GAC1E,MAAc,WAATA,GAAqB8B,gBAAiB,CAAE,WAAa9F,OAAS,EAC3D6F,GAGRE,MAAO3F,EAAQ4F,wBAER,EACR,GACD,EAEAzF,EAAKsB,eAAiB,WACrBlD,EAAGsH,UAAWC,KACb,qBACA,SAAUC,EAAOxF,EAAMoD,GACF,WAAfA,EAAMC,MAEVzD,EAAK0D,0BAA2BF,EAElC,GAEF,EAEAxD,EAAK0D,0BAA4B,SAAUF,GAC1C,IAAMqC,EAAqB,oCACrBC,EAAoB1H,EAAGyH,GAE7B,IAAK7F,EAAKO,oBAAwBuF,EAAkBrG,aAAmC,IAAlBb,OAAOmH,OAA5E,CAIA/F,EAAKO,oBAAqB,EAC1BuF,EAAkBE,SAAUxC,EAAMyC,aAClCH,EAAkBI,KAAM,IAEnB1C,EAAM4B,wBAA2BhH,EAAG,2BAA4BqB,OACpErB,EAAG,sKAAuK+H,aAAcL,IAC3KtC,EAAM4B,uBAAyBhH,EAAG,2BAA4BqB,QAC3ErB,EAAG,2BAA4BgI,SAGhC,IAAMC,EAAe,CACpBC,MAAO,CACNC,OAAQ/C,EAAMgD,cACdC,MAAOjD,EAAMkD,aACbC,MAAOnD,EAAMoD,cAEdC,OAAM,SAAEpC,EAAMqC,GACbA,EAAQC,SACT,GAGI9G,KAAK3B,cAAcoC,aACvB2F,EAAaW,mBAAqB,WACjC,OAAO,CACR,GAGDhH,EAAKiH,yBAELjH,EAAKM,cAAgB1B,OAAOmH,OAAOmB,QAASb,GAC5CrG,EAAKM,cAAc6G,OAAQtB,GAAqBuB,MAC/C,WACCpH,EAAKO,oBAAqB,CAC3B,GAnCD,CAqCD,EAKAP,EAAKiH,uBAAyB,WACxBjH,EAAKM,oBAAiB,IAAuBN,EAAKM,cAAc+G,OACpErH,EAAKM,cAAc+G,OAErB,EAEArH,EAAK2D,gCAAkC,SAAUH,GAChDpF,EAAG,2CAA4CkJ,IAAK,UAAWrD,GAC9D,UACA,WACC,IAAMsD,EAAUnJ,EAAG6B,MAAOyE,KAAM,MAC1B7D,EAAQzC,EAAG6B,MAAO8D,MAExBI,iBAAkBoD,EAAS1G,GAC3Bb,EAAK0D,0BAA2BF,EACjC,GAEF,EAOAxD,EAAKwH,oBAAsB,SAAUhE,GACpCxD,EAAKM,eAAgB,EAGrBN,EAAKyH,mBAGLzH,EAAK0H,qBAAqB,GAAOC,YAAa,UAG9CvJ,EAAG,qCAAsCwJ,MAC1C,EAEA5H,EAAKuB,sBAAwB,WAC5BnD,EAAGsH,UAAWC,KAAM,6BAA6B,SAAUC,EAAOpC,EAAOpD,GACxE,GAAoB,WAAfoD,EAAMC,KAAX,CAcA,IAAM,IAAM/D,KATZM,EAAK0H,sBAAsB1B,SAAU,UAIY,KAA5CnG,EAAQgI,kCACZrE,EAAM2B,QAAU,CAAE,mBAClBhB,iBAAkB,UAAWX,EAAM2B,UAGnB3B,EAAM2B,QACM,gBAAvB3B,EAAM2B,QAASzF,GACnBtB,EAAG,sCAAuCgG,KAAM,WAAW,GAE3DhG,EAAG,yCAA0CgG,KAAM,WAAW,GAIhE,IAAM,IAAM1E,KAAK8D,EAAMsE,YACftE,EAAMsE,YAAYC,eAAgBrI,IAIzCtB,EAAG,sBAAwBoF,EAAMsE,YAAapI,IAAM0E,KAAM,WAAW,GAItE,IAAM4D,EAAc,cACdC,EAAgB,cAEhBC,EAAYrI,EAAQsI,OACzBC,EAAQ5E,EAAM6E,OAAQ,GACtBC,EAAWtI,EAAKuI,aAAcH,EAAME,UAAU,GAC9CE,EAAQF,EAAWzI,EAAQ4I,SAAW5I,EAAQ6I,OAC9CC,EAAML,EAAWL,EAAgBD,EAElC5J,EAAG,uCAAwCwK,QAAUN,GAErDlK,EAAG,+DAAgEyK,QAAS,eAAiBhJ,EAAQ+H,KAAO,kBAC5GxJ,EAAG,sPAAuPyK,QAAS,aACnQzK,EAAG,+DAAgEyK,QAAS,2BAA8BrF,EAAMnD,GAAK,YAAgBmI,EAAQ,oDAA0DN,EAAYS,EAAM,YAEzNvK,EAAG,8EAA+EgG,KAAM,WAAYkE,GAEpGlK,EAAG,iEAAkEkJ,IAAK,kBAAmBrD,GAC5F,kBACA,SAAU6E,GACTA,EAAEC,2BACF,IAAMC,EAAO5K,EAAG6B,MAEVgJ,EAAWD,EAAKtE,KAAM,OAAQC,QAASqD,IAAiB,EACxDkB,EAAeD,EAAWjB,EAAcC,EACxCkB,EAAkBF,EAAWhB,EAAgBD,EAC7CoB,EAASJ,EAAKtE,KAAM,OAAQE,QAASsE,EAAcC,GAEzDH,EAAKtE,KAAM,MAAO0E,GAGlBhL,EAAG,UAAYoF,EAAMnD,GAAK,gBAAiBuI,QAAUK,GAGrD7K,EAAG,8EAA+EgG,KAAM,WAAY6E,GAGpG7K,EAAG,gCAAkCoF,EAAMnD,GAAK,MAAOuI,QAAUK,GAEjEI,eAAgBJ,EAAUb,EAAM/H,GACjC,IAIuB,CAAE,gBAAiB,cAAe,eAAgB,gBAC1DiJ,SAAS,SAAUR,GAClC1K,EAAG,IAAM0K,GAAI/E,IAAKP,EAAOsF,GAC1B,GA3EA,MAFC9I,EAAKwH,oBAAqBhE,EA8E5B,GACD,EAUAxD,EAAK0H,oBAAsB,SAAU6B,GACpC,IAAMC,EAAUpL,EAAE,6RAalB,OAAO4B,EAAKuI,aAAcgB,GAAqB,GAAUC,EAAQC,OAAQ,WAAcD,CACxF,EASAxJ,EAAKkF,0BAA4B,SAAUC,EAASuE,GACnDA,EAAS1J,EAAKuI,aAAcmB,GAAQ,GAEpC,IAAMC,EAAU,cAEfC,GAAgB,IAAU3J,KAAK3B,cAAcsC,yBAA0B+I,GACvEE,EAAczL,EAAE0C,QAAS6I,EAASxE,IAAa,GAAKyE,EACpDE,EAAwB1L,EAAE0C,QAHN,kBAGkCqE,IAAa,EAEpEnF,EAAK+J,uBAAwBL,EAAQG,GAErC7J,EAAKgK,wBAAyBN,EAAQI,EAAuBD,GAE7D7J,EAAKiK,2BAA4BP,EAAQE,EAC1C,EAUA5J,EAAK+J,uBAAyB,SAAUL,EAAQG,GAC1CA,GACJzL,EAAG,+CAAgD8L,SACnDlK,EAAK0H,qBAAqB,GAAO+B,OAAQ,WAAYS,WAErD9L,EAAG,gDAAiD+L,UAE/CT,EACJ1J,EAAK0H,qBAAqB,GAAOzC,OAEjCjF,EAAK0H,qBAAqB,GAAOyC,UAGpC,EAYAnK,EAAKgK,wBAA0B,SAAUN,EAAQI,EAAuBD,GAClEC,GACJ1L,EAAG,0CAA2C8L,SAC9C9L,EAAG,sCAAuC8L,WAE1C9L,EAAG,mCAAoC+L,UACvC/L,EAAG,uCAAwC+L,UAE7C,EAUAnK,EAAKoK,yBAA2B,SAAUR,GACzC,OAASA,GAAiBxL,EAAG,4CAA6CqB,QAAU,CACrF,EAUAO,EAAKiK,2BAA6B,SAAUP,EAAQE,GAC9C5J,EAAKoK,yBAA0BR,IACnCxL,EAAG,sCAAuC+L,UAErCT,EACJtL,EAAG,kCAAmC6G,OAEtC7G,EAAG,kCAAmC+L,YAGvC/L,EAAG,yCAA0C8L,SAC7C9L,EAAG,qCAAsC8L,SAE3C,EAKAlK,EAAKyH,iBAAmB,WACvBzH,EAAK0H,qBAAqB,GAAOzC,OACjC7G,EAAG,8BAA+B6G,OAClC7G,EAAG,kCAAmC6G,MACvC,EASAjF,EAAKqK,kBAAoB,SAAUvB,EAAG/D,GACrC,IAAMI,EAAUmF,mBAAmBnF,QAAUmF,mBAAmBnF,QAAU,IAAIvF,MACxEiB,EAAQzC,EAAG2G,GAAOhB,MAClBwG,EAA2BnM,EAAG2G,GAAOL,KAAM,uBACjD,GAAKtG,EAAG2G,GAAOT,GAAI,YAClBlG,EAAG,IAAMmM,GAA2B3C,QACE,IAAjCxJ,EAAE0C,QAASD,EAAOsE,KAEtBA,EAASA,EAAQ1F,QAAWoB,OAEvB,CAEN,GADAzC,EAAG,IAAMmM,GAA2BtF,OAC/BE,EAAQ1F,QAAU,EAItB,OAHA+F,MAAO3F,EAAQ2K,kBAEf1B,EAAE2B,kBACK,EAGR,IAAMC,EAAQtM,EAAE0C,QAASD,EAAOsE,IAChB,IAAXuF,GACJvF,EAAQwF,OAAQD,EAAO,EAEzB,CAEAvG,iBAAkB,UAAWgB,GAE7BnF,EAAK4K,4CAA6C7F,EAAMlE,GAExDb,EAAKkF,0BAA2BC,EACjC,EAUAnF,EAAK4K,4CAA8C,SAAU7F,EAAM8F,GAClE,IAAMC,EAAqB1M,EAAG2G,GACxBgG,EAAgB3M,EAAG6B,KAAKiB,gBAAiB8J,KAAM,mDAE9CD,EAActL,QACpBrB,EAAG6B,KAAKiB,gBAAiB+J,OAAQF,GAG7B9K,KAAK3B,cAAcoC,YAAcT,KAAK3B,cAAcsC,yBAA0BiK,IAAYC,EAAmBxG,GAAI,YACrHyG,EAAcnD,OAEdmD,EAAc9F,MAEhB,EAKAjF,EAAKyB,6BAA+B,WAC5BxB,KAAK3B,cAAcoC,aAI1BtC,EAAG6B,KAAKiB,gBAAiB+J,OAAQhL,KAAKmB,MAAM9C,cAAcE,kCAAmCyB,KAAKO,SAAUT,+BAA+BmL,qCAC3IjL,KAAK3B,cAAc6M,OAASlL,KAAKmB,MAAM9C,cAAcC,qBAE9C0B,KAAK3B,cAAc0C,YACzBf,KAAK3B,cAAc6M,OAAOlG,OAE5B,EAEAjF,EAAKwB,qBAAuB,WAC3BpD,EAAG,gEAAiE6F,GACnE,kBACA,SAAU6E,GACT9I,EAAKqK,kBAAmBvB,EAAG7I,KAC5B,GAEF,EAYAD,EAAKuI,aAAe,SAAU6C,EAAWC,GACxC,YAAO,IAAuBD,EAAYC,EAAeD,CAC1D,EAEApL,EAAKmB,MACN,EAEA/C,EAAGsH,UAAW4F,MAAOxL,iB","sources":["webpack://gform-ppcp/../../../assets/js/src/legacy/utilities.js","webpack://gform-ppcp/webpack/bootstrap","webpack://gform-ppcp/../../@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://gform-ppcp/../../../assets/js/src/legacy/form_editor.js","webpack://gform-ppcp/../../@babel/runtime/helpers/esm/slicedToArray.js","webpack://gform-ppcp/../../@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://gform-ppcp/../../@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://gform-ppcp/../../@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://gform-ppcp/../../@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["/* eslint-disable */\n\n/**\n * This file contains a collection of utility methods intended to be usable across the GF PayPal Checkout JS add-on.\n *\n * @param  $\n */\n( function( $ ) {\n\tconst GFPayPalCheckoutUtils = {\n\t\tsubscriptions: {\n\t\t\tgetNoticeContainer: () => {\n\t\t\t\treturn $( '#gf-paypal-checkout-unsupported-payment-warning' );\n\t\t\t},\n\n\t\t\tgetUnsupportedPaymentMethodMarkup: ( legacy = false, message ) => {\n\t\t\t\tif ( ! message ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet messageMarkup = `\t\t\t\t\t\t\n\t\t\t\t\t<div id=\"gf-paypal-checkout-unsupported-payment-warning\" class=\"gform-alert gform-alert--notice gform-alert--inline\" data-js=\"gform-alert\">\n\t\t\t\t\t\t<span class=\"gform-alert__icon gform-icon gform-icon--circle-notice\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<div class=\"gform-alert__message-wrap\">\n\t\t\t\t\t\t\t<p class=\"gform-alert__message\">${ message }</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\n\t\t\t\tif ( legacy ) {\n\t\t\t\t\tmessageMarkup = `\t\t\t\t\t\t\n\t\t\t\t\t\t<div id=\"gf-paypal-checkout-unsupported-payment-warning\" class=\"gform-settings__wrapper gform-alert__legacy\">\n\t\t\t\t\t\t\t<div class=\"alert gforms_note_warning alert_yellow\">\n\t\t\t\t\t\t\t\t<p>${ message }</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t}\n\n\t\t\t\treturn messageMarkup;\n\t\t\t},\n\t\t},\n\t};\n\n\twindow.GFPayPalCheckoutUtils = GFPayPalCheckoutUtils;\n}( jQuery ) );\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","/* eslint-disable */\n\nimport './utilities.js';\n\nwindow.GFPPCPFormEditor = null;\n\n( function( $, strings ) {\n\twindow.GFPPCPFormEditor = function() {\n\t\tconst self = this;\n\t\tconst subscriptionsData = strings.form_data[ form.id ];\n\n\t\tself.paypalButtons = false;\n\n\t\tself.isRenderingButtons = false;\n\n\t\tself.isLegacy = strings.is_legacy === 'true';\n\n\t\tself.subscriptions = {\n\t\t\tfeedExists: subscriptionsData.has_feed === 'true',\n\t\t\tunsupportedPaymentMethod( value ) {\n\t\t\t\treturn $.inArray( value, subscriptionsData.supported_methods ) === -1;\n\t\t\t},\n\t\t\tshowNotice: subscriptionsData.show_notice === 'true',\n\t\t};\n\n\t\tself.fieldContainer = '.gform_ppcp_custom_card_fields';\n\n\t\tself.init = function() {\n\t\t\tself.utils = GFPayPalCheckoutUtils;\n\t\t\tself.hooks();\n\n\t\t\tself.bindFieldAdded();\n\t\t\tself.bindLoadFieldSettings();\n\t\t\tself.bindSetPaymentMethod();\n\t\t\tself.maybeLoadSubscriptionsNotice();\n\t\t};\n\n\t\tself.hooks = function() {\n\t\t\tgform.addAction( 'gform_post_load_field_settings', function( [ field, form ] ) {\n\t\t\t\tif ( 'paypal' === field.type ) {\n\t\t\t\t\t// Render the Smart Payment Buttons.\n\t\t\t\t\tself.renderSmartPaymentButtons( field );\n\t\t\t\t\tself.bindRerenderSmartPaymentButtons( field );\n\n\t\t\t\t\t// Hide #field_settings when the api is not initialized.\n\t\t\t\t\t// This is called right after the settings are shown. So that makes it feel like there's no settings.\n\t\t\t\t\t// Timeout because FieldClick() shows the settings after  HideSettings() is called.\n\t\t\t\t\tif ( strings.initialize_api === '' ) {\n\t\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\tHideSettings();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t0.01 );\n\t\t\t\t\t}\n\n\t\t\t\t\t$( '#field_paypal_default_payment_method' ).val( field.defaultPaymentMethod ).on( 'change', function() {\n\t\t\t\t\t\tconst newMethod = $( this ).val();\n\t\t\t\t\t\t$( '.gform_ppcp_payment_method select' ).val( newMethod );\n\t\t\t\t\t\t// Update the default payment method in the global form variable.\n\t\t\t\t\t\tSetFieldProperty( 'defaultPaymentMethod', newMethod );\n\t\t\t\t\t} );\n\n\t\t\t\t\t$( '#paypal_payment_buttons' ).prop( 'checked', field.paypalPaymentButtons ).on( 'change', function() {\n\t\t\t\t\t\tSetFieldProperty( 'paypalPaymentButtons', $( '#paypal_payment_buttons' ).is( ':checked' ) );\n\t\t\t\t\t} );\n\n\t\t\t\t\t$( '.input_placeholders_setting' ).on( 'input propertychange', '.input_placeholder', function() {\n\t\t\t\t\t\tconst inputId = $( this ).closest( '.input_placeholder_row' ).data( 'input_id' );\n\n\t\t\t\t\t\tif ( $( this ).attr( 'id' ).indexOf( '.5' ) === -1 ) {\n\t\t\t\t\t\t\t$( '#input_' + inputId.toString().replace( '.', '_' ) ).text( this.value );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\t// Remove JCB card option.\n\t\t\t\t\t$( '.credit_card_setting ul li' ).each( function( i, elem ) {\n\t\t\t\t\t\tif ( $( elem ).children( 'input' ).val() === 'jcb' ) {\n\t\t\t\t\t\t\t$( elem ).hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\tself.togglePaymentMethodFields( field.methods, true );\n\n\t\t\t\t\t$( '#paypal_credit_messages_setting' ).prop( 'checked', field.displayCreditMessages ).on( 'change', function() {\n\t\t\t\t\t\tSetFieldProperty( 'displayCreditMessages', $( '#paypal_credit_messages_setting' ).is( ':checked' ) );\n\t\t\t\t\t\tself.renderSmartPaymentButtons( field );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tself.paypalButtons = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tgform.addFilter( 'gform_form_editor_can_field_be_added', function( result, type ) {\n\t\t\t\tif ( type !== 'paypal' || GetFieldsByType( [ 'paypal' ] ).length < 1 ) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\talert( strings.only_one_paypal_field );\n\n\t\t\t\treturn false;\n\t\t\t} );\n\t\t};\n\n\t\tself.bindFieldAdded = function() {\n\t\t\t$( document ).bind(\n\t\t\t\t'gform_field_added',\n\t\t\t\tfunction( event, form, field ) {\n\t\t\t\t\tif ( field.type === 'paypal' ) {\n\t\t\t\t\t\t// Render the Smart Payment Buttons.\n\t\t\t\t\t\tself.renderSmartPaymentButtons( field );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\tself.renderSmartPaymentButtons = function( field ) {\n\t\t\tconst buttonsContainerID = '#gform_ppcp_smart_payment_buttons';\n\t\t\tconst $buttonsContainer = $( buttonsContainerID );\n\n\t\t\tif ( self.isRenderingButtons || ! $buttonsContainer.length || typeof window.paypal === 'undefined' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself.isRenderingButtons = true;\n\t\t\t$buttonsContainer.addClass( field.buttonsSize );\n\t\t\t$buttonsContainer.html( '' );\n\n\t\t\tif ( field.displayCreditMessages && ! $( '#paypal_credit_messages' ).length ) {\n\t\t\t\t$( '<div id=\"paypal_credit_messages\" data-pp-message data-pp-style-layout=\"text\" data-pp-style-logo-type=\"inline\" data-pp-style-color=\"black\" data-pp-amount=\"\"></div>' ).insertBefore( $buttonsContainer );\n\t\t\t} else if ( ! field.displayCreditMessages && $( '#paypal_credit_messages' ).length ) {\n\t\t\t\t$( '#paypal_credit_messages' ).remove();\n\t\t\t}\n\n\t\t\tconst buttonParams = {\n\t\t\t\tstyle: {\n\t\t\t\t\tlayout: field.buttonsLayout,\n\t\t\t\t\tcolor: field.buttonsColor,\n\t\t\t\t\tshape: field.buttonsShape,\n\t\t\t\t},\n\t\t\t\tonInit( data, actions ) {\n\t\t\t\t\tactions.disable();\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif ( this.subscriptions.feedExists ) {\n\t\t\t\tbuttonParams.createSubscription = function() {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tself.maybeClosePaypalButton();\n\n\t\t\tself.paypalButtons = window.paypal.Buttons( buttonParams );\n\t\t\tself.paypalButtons.render( buttonsContainerID ).then(\n\t\t\t\tfunction() {\n\t\t\t\t\tself.isRenderingButtons = false;\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * Properly close Paypal button.\n\t\t */\n\t\tself.maybeClosePaypalButton = function() {\n\t\t\tif ( self.paypalButtons && 'undefined' !== typeof self.paypalButtons.close ) {\n\t\t\t\tself.paypalButtons.close();\n\t\t\t}\n\t\t};\n\n\t\tself.bindRerenderSmartPaymentButtons = function( field ) {\n\t\t\t$( '#smart_payment_buttons_container select' ).off( 'change' ).on(\n\t\t\t\t'change',\n\t\t\t\tfunction() {\n\t\t\t\t\tconst setting = $( this ).attr( 'id' );\n\t\t\t\t\tconst value = $( this ).val();\n\n\t\t\t\t\tSetFieldProperty( setting, value );\n\t\t\t\t\tself.renderSmartPaymentButtons( field );\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * Restore original settings fields.\n\t\t *\n\t\t * @param  field\n\t\t */\n\t\tself.resetSettingsFields = function( field ) {\n\t\t\tself.paypalButtons = false;\n\n\t\t\t// Hide Paypal related fields.\n\t\t\tself.hidePaypalFields();\n\n\t\t\t// Remove Paypal class from fields.\n\t\t\tself.getCreditCardFields( true ).removeClass( 'paypal' );\n\n\t\t\t// Restore JCB card option.\n\t\t\t$( '.credit_card_setting ul li:hidden' ).show();\n\t\t};\n\n\t\tself.bindLoadFieldSettings = function() {\n\t\t\t$( document ).bind( 'gform_load_field_settings', function( event, field, form ) {\n\t\t\t\tif ( field.type !== 'paypal' ) {\n\t\t\t\t\tself.resetSettingsFields( field );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.getCreditCardFields().addClass( 'paypal' );\n\n\t\t\t\t// If the field was previously set with an account that supports custom card fields,\n\t\t\t\t// but now switch to another account doesn't, we dynamically update the methods here.\n\t\t\t\tif ( strings.is_custom_card_fields_supported === '' ) {\n\t\t\t\t\tfield.methods = [ 'PayPal Checkout' ];\n\t\t\t\t\tSetFieldProperty( 'methods', field.methods );\n\t\t\t\t}\n\n\t\t\t\tfor ( const i in field.methods ) {\n\t\t\t\t\tif ( field.methods[ i ] === 'Credit Card' ) {\n\t\t\t\t\t\t$( '#paypal_payment_custom_card_fields' ).prop( 'checked', true );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$( '#paypal_payment_smart_payment_buttons' ).prop( 'checked', true );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor ( const i in field.creditCards ) {\n\t\t\t\t\tif ( ! field.creditCards.hasOwnProperty( i ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$( '#field_credit_card_' + field.creditCards[ i ] ).prop( 'checked', true );\n\t\t\t\t}\n\n\t\t\t\t// Add the toggle to the cardholder name sub-label.\n\t\t\t\tconst activeImage = 'active1.png';\n\t\t\t\tconst inactiveImage = 'active0.png';\n\n\t\t\t\tconst imagesUrl = strings.imgurl,\n\t\t\t\t\tinput = field.inputs[ 4 ],\n\t\t\t\t\tisHidden = self.getParameter( input.isHidden, false ),\n\t\t\t\t\ttitle = isHidden ? strings.inactive : strings.active,\n\t\t\t\t\timg = isHidden ? inactiveImage : activeImage;\n\n\t\t\t\t$( '.input_placeholders.paypal tr:eq(4)' ).toggle( ! isHidden );\n\n\t\t\t\t$( '.sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(0)' ).prepend( '<td><strong>' + strings.show + '</strong></td>' );\n\t\t\t\t$( '.sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(1), .sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(2), .sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(3), .sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(5)' ).prepend( '<td></td>' );\n\t\t\t\t$( '.sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(4)' ).prepend( '<td><img data-input_id=\\'' + field.id + '.5\\' alt=\\'' + title + '\\' class=\\'input_active_icon cardholder_name\\' src=\\'' + imagesUrl + img + '\\'/></td>' );\n\t\t\t\t// Toggle Sub-Label disabled status.\n\t\t\t\t$( '.sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(4) td:eq(2) input' ).prop( 'disabled', isHidden );\n\t\t\t\t// Allow Cardholder Name to be disabled.\n\t\t\t\t$( '.sub_labels_setting.paypal .input_active_icon.cardholder_name' ).off( 'click keypress' ).on(\n\t\t\t\t\t'click keypress',\n\t\t\t\t\tfunction( e ) {\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\tconst $img = $( this );\n\n\t\t\t\t\t\tconst isActive = $img.attr( 'src' ).indexOf( activeImage ) >= 0;\n\t\t\t\t\t\tconst currentImage = isActive ? activeImage : inactiveImage;\n\t\t\t\t\t\tconst replacmentImage = isActive ? inactiveImage : activeImage;\n\t\t\t\t\t\tconst newSrc = $img.attr( 'src' ).replace( currentImage, replacmentImage );\n\n\t\t\t\t\t\t$img.attr( 'src', newSrc );\n\n\t\t\t\t\t\t// Toggle field visibility.\n\t\t\t\t\t\t$( '#input_' + field.id + '_5_container' ).toggle( ! isActive );\n\n\t\t\t\t\t\t// Toggle Sub-Label disabled status.\n\t\t\t\t\t\t$( '.sub_labels_setting.paypal .field_custom_inputs_ui tr:eq(4) td:eq(2) input' ).prop( 'disabled', isActive );\n\n\t\t\t\t\t\t// Toggle Placeholder\n\t\t\t\t\t\t$( '#input_placeholder_row_input_' + field.id + '_5' ).toggle( ! isActive );\n\n\t\t\t\t\t\tSetInputHidden( isActive, input.id );\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Set up the Smart Payment Button styles.\n\t\t\t\tconst buttonsSettings = [ 'buttonsLayout', 'buttonsSize', 'buttonsShape', 'buttonsColor' ];\n\t\t\t\tbuttonsSettings.forEach( function( e ) {\n\t\t\t\t\t$( '#' + e ).val( field[ e ] );\n\t\t\t\t} );\n\t\t\t} );\n\t\t};\n\n\t\t/**\n\t\t * Get settings fields related to credit card payment method.\n\t\t *\n\t\t * @param  bool                filterByPaypalClass If fields should be filtered by paypal class.\n\t\t *\n\t\t * @param  filterByPaypalClass\n\t\t * @return {*|jQuery|HTMLElement}\n\t\t */\n\t\tself.getCreditCardFields = function( filterByPaypalClass ) {\n\t\t\tconst $fields = $(\n\t\t\t\t`\n\t\t\t\t.input_placeholders_setting,\n\t\t\t\t.sub_labels_setting,\n\t\t\t\t.sub_label_placement_setting,\n\t\t\t\t.credit_card_setting,\n\t\t\t\t.credit_card_style_setting,\n\t\t\t\t.label_placement_setting,\n\t\t\t\t.error_message_setting,\n\t\t\t\t.css_class_setting\n\t\t\t\t`\n\t\t\t);\n\n\t\t\treturn self.getParameter( filterByPaypalClass, false ) ? $fields.filter( '.paypal' ) : $fields;\n\t\t};\n\n\t\t/**\n\t\t * Toggle fields related to Payment Method\n\t\t *\n\t\t * @param  array   methods Payment methods array.\n\t\t * @param  methods\n\t\t * @param  isInit\n\t\t */\n\t\tself.togglePaymentMethodFields = function( methods, isInit ) {\n\t\t\tisInit = self.getParameter( isInit, false );\n\n\t\t\tconst ccValue = 'Credit Card',\n\t\t\t\tsmartButtonsValue = 'PayPal Checkout',\n\t\t\t\tccIsSupported = false === this.subscriptions.unsupportedPaymentMethod( ccValue ),\n\t\t\t\tccIsVisible = $.inArray( ccValue, methods ) >= 0 && ccIsSupported,\n\t\t\t\tsmartButtonsIsVisible = $.inArray( smartButtonsValue, methods ) >= 0;\n\n\t\t\tself.toggleCreditCardFields( isInit, ccIsVisible );\n\n\t\t\tself.toggleSmartButtonFields( isInit, smartButtonsIsVisible, ccIsVisible );\n\n\t\t\tself.toggleDefaultPaymentMethod( isInit, ccIsSupported );\n\t\t};\n\n\t\t/**\n\t\t * Toggle the Credit Card fields.\n\t\t *\n\t\t * @param  bool        isInit      If this is the init event.\n\t\t * @param  bool        ccIsVisible If Credit Card fields should be visible.\n\t\t * @param  isInit\n\t\t * @param  ccIsVisible\n\t\t */\n\t\tself.toggleCreditCardFields = function( isInit, ccIsVisible ) {\n\t\t\tif ( ccIsVisible ) {\n\t\t\t\t$( '.ginput_container_custom_card_fields:hidden' ).fadeIn();\n\t\t\t\tself.getCreditCardFields( true ).filter( ':hidden' ).fadeIn();\n\t\t\t} else {\n\t\t\t\t$( '.ginput_container_custom_card_fields:visible' ).fadeOut();\n\n\t\t\t\tif ( isInit ) {\n\t\t\t\t\tself.getCreditCardFields( true ).hide();\n\t\t\t\t} else {\n\t\t\t\t\tself.getCreditCardFields( true ).fadeOut();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Toggle the Smart Button Fields\n\t\t *\n\t\t * @param  bool                  isInit                If this is the init event.\n\t\t * @param  bool                  smartButtonsIsVisible If Smart Buttons fields should be visible.\n\t\t * @param  bool                  ccIsVisible           If Credit Card fields should be visible.\n\t\t * @param  isInit\n\t\t * @param  smartButtonsIsVisible\n\t\t * @param  ccIsVisible\n\t\t */\n\t\tself.toggleSmartButtonFields = function( isInit, smartButtonsIsVisible, ccIsVisible ) {\n\t\t\tif ( smartButtonsIsVisible ) {\n\t\t\t\t$( '.smart_payment_buttons_settings:hidden' ).fadeIn();\n\t\t\t\t$( '.smart_payment_buttons_note:hidden' ).fadeIn();\n\t\t\t} else {\n\t\t\t\t$( '.smart_payment_buttons_settings' ).fadeOut();\n\t\t\t\t$( '.smart_payment_buttons_note:visible' ).fadeOut();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * If default Payment method field should be shown.\n\t\t *\n\t\t * @param  bool          ccIsSupported Is the Credit Card field supported.\n\t\t *\n\t\t * @param  ccIsSupported\n\t\t * @return {boolean}\n\t\t */\n\t\tself.showDefaultPaymentMethod = function( ccIsSupported ) {\n\t\t\treturn ! ccIsSupported || $( '.supported_payment_methods input:checked' ).length <= 1;\n\t\t};\n\n\t\t/**\n\t\t * Toggle Default Payment Fields visibility.\n\t\t *\n\t\t * @param  bool          isInit        If this is the initalize event.\n\t\t * @param  bool          ccIsSupported If credit card fields are supported.\n\t\t * @param  isInit\n\t\t * @param  ccIsSupported\n\t\t */\n\t\tself.toggleDefaultPaymentMethod = function( isInit, ccIsSupported ) {\n\t\t\tif ( self.showDefaultPaymentMethod( ccIsSupported ) ) {\n\t\t\t\t$( '.gform_ppcp_payment_method:visible' ).fadeOut();\n\n\t\t\t\tif ( isInit ) {\n\t\t\t\t\t$( '.paypal_default_payment_method' ).hide();\n\t\t\t\t} else {\n\t\t\t\t\t$( '.paypal_default_payment_method' ).fadeOut();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$( '.paypal_default_payment_method:hidden' ).fadeIn();\n\t\t\t\t$( '.gform_ppcp_payment_method:hidden' ).fadeIn();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Hide Paypal fields when not on Paypal field type.\n\t\t */\n\t\tself.hidePaypalFields = function() {\n\t\t\tself.getCreditCardFields( true ).hide();\n\t\t\t$( '.supported_payment_methods' ).hide();\n\t\t\t$( '.paypal_default_payment_method' ).hide();\n\t\t};\n\n\t\t/**\n\t\t * Displays inputs for the payment methods selected in the field.\n\t\t *\n\t\t * @param  e\n\t\t * @param  elem\n\t\t * @return {boolean}\n\t\t */\n\t\tself.SetPaymentMethods = function( e, elem ) {\n\t\t\tconst methods = GetSelectedField().methods ? GetSelectedField().methods : new Array();\n\t\t\tconst value = $( elem ).val();\n\t\t\tconst methodOptionsContainerId = $( elem ).attr( 'data-method-options' );\n\t\t\tif ( $( elem ).is( ':checked' ) ) {\n\t\t\t\t$( '#' + methodOptionsContainerId ).show();\n\t\t\t\tif ( $.inArray( value, methods ) === -1 ) {\n\t\t\t\t\t// Add the checked method to the index of methods.\n\t\t\t\t\tmethods[ methods.length ] = value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$( '#' + methodOptionsContainerId ).hide();\n\t\t\t\tif ( methods.length <= 1 ) {\n\t\t\t\t\talert( strings.must_have_method );\n\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst index = $.inArray( value, methods );\n\t\t\t\tif ( index !== -1 ) {\n\t\t\t\t\tmethods.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSetFieldProperty( 'methods', methods );\n\n\t\t\tself.maybeDisplayUnsupportedPaymentMethodMessage( elem, value );\n\n\t\t\tself.togglePaymentMethodFields( methods );\n\t\t};\n\n\t\t/**\n\t\t * Display a form admin message when a selected payment method is not supported by the form's PayPal feeds.\n\t\t *\n\t\t * @since 2.0\n\t\t *\n\t\t * @param {object} elem   DOM element.\n\t\t * @param {string} method The payment method.\n\t\t */\n\t\tself.maybeDisplayUnsupportedPaymentMethodMessage = function( elem, method ) {\n\t\t\tconst $unsupportedMethod = $( elem );\n\t\t\tconst $errorMessage = $( this.fieldContainer ).find( '#gf-paypal-checkout-unsupported-payment-warning' );\n\n\t\t\tif ( ! $errorMessage.length ) {\n\t\t\t\t$( this.fieldContainer ).append( $errorMessage );\n\t\t\t}\n\n\t\t\tif ( this.subscriptions.feedExists && this.subscriptions.unsupportedPaymentMethod( method ) && $unsupportedMethod.is( ':checked' ) ) {\n\t\t\t\t$errorMessage.show();\n\t\t\t} else {\n\t\t\t\t$errorMessage.hide();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Show a notice in the form editor if a subscriptions feed exists and credit cards are selected.\n\t\t */\n\t\tself.maybeLoadSubscriptionsNotice = function() {\n\t\t\tif ( ! this.subscriptions.feedExists ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$( this.fieldContainer ).append( this.utils.subscriptions.getUnsupportedPaymentMethodMarkup( this.isLegacy, gform_ppcp_form_editor_strings.unsupported_payment_option_message ) );\n\t\t\tthis.subscriptions.notice = this.utils.subscriptions.getNoticeContainer();\n\n\t\t\tif ( ! this.subscriptions.showNotice ) {\n\t\t\t\tthis.subscriptions.notice.hide();\n\t\t\t}\n\t\t};\n\n\t\tself.bindSetPaymentMethod = function() {\n\t\t\t$( '.supported_payment_methods input:checkbox:not([data-option])' ).on(\n\t\t\t\t'click keypress',\n\t\t\t\tfunction( e ) {\n\t\t\t\t\tself.SetPaymentMethods( e, this );\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * Checks a parameter if defined, returns the value or the default value.\n\t\t *\n\t\t * @param  mixed        parameter    The function parameter.\n\t\t * @param  mixed        defaultValue The default value if not defined.\n\t\t *\n\t\t * @param  parameter\n\t\t * @param  defaultValue\n\t\t * @return mixed\n\t\t */\n\t\tself.getParameter = function( parameter, defaultValue ) {\n\t\t\treturn 'undefined' === typeof parameter ? defaultValue : parameter;\n\t\t};\n\n\t\tself.init();\n\t};\n\n\t$( document ).ready( GFPPCPFormEditor );\n}( jQuery, gform_ppcp_form_editor_strings ) );\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["$","GFPayPalCheckoutUtils","subscriptions","getNoticeContainer","getUnsupportedPaymentMethodMarkup","legacy","message","messageMarkup","window","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","_arrayLikeToArray","arr","len","length","i","arr2","Array","strings","GFPPCPFormEditor","gform_ppcp_form_editor_strings","self","this","subscriptionsData","form_data","form","id","paypalButtons","isRenderingButtons","isLegacy","is_legacy","feedExists","has_feed","unsupportedPaymentMethod","value","inArray","supported_methods","showNotice","show_notice","fieldContainer","init","utils","hooks","bindFieldAdded","bindLoadFieldSettings","bindSetPaymentMethod","maybeLoadSubscriptionsNotice","gform","addAction","isArray","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","err","o","minLen","n","prototype","toString","slice","constructor","name","from","test","TypeError","field","type","renderSmartPaymentButtons","bindRerenderSmartPaymentButtons","initialize_api","setTimeout","HideSettings","val","defaultPaymentMethod","on","newMethod","SetFieldProperty","prop","paypalPaymentButtons","is","inputId","closest","data","attr","indexOf","replace","text","each","elem","children","hide","togglePaymentMethodFields","methods","displayCreditMessages","addFilter","result","GetFieldsByType","alert","only_one_paypal_field","document","bind","event","buttonsContainerID","$buttonsContainer","paypal","addClass","buttonsSize","html","insertBefore","remove","buttonParams","style","layout","buttonsLayout","color","buttonsColor","shape","buttonsShape","onInit","actions","disable","createSubscription","maybeClosePaypalButton","Buttons","render","then","close","off","setting","resetSettingsFields","hidePaypalFields","getCreditCardFields","removeClass","show","is_custom_card_fields_supported","creditCards","hasOwnProperty","activeImage","inactiveImage","imagesUrl","imgurl","input","inputs","isHidden","getParameter","title","inactive","active","img","toggle","prepend","e","stopImmediatePropagation","$img","isActive","currentImage","replacmentImage","newSrc","SetInputHidden","forEach","filterByPaypalClass","$fields","filter","isInit","ccValue","ccIsSupported","ccIsVisible","smartButtonsIsVisible","toggleCreditCardFields","toggleSmartButtonFields","toggleDefaultPaymentMethod","fadeIn","fadeOut","showDefaultPaymentMethod","SetPaymentMethods","GetSelectedField","methodOptionsContainerId","must_have_method","preventDefault","index","splice","maybeDisplayUnsupportedPaymentMethodMessage","method","$unsupportedMethod","$errorMessage","find","append","unsupported_payment_option_message","notice","parameter","defaultValue","ready"],"sourceRoot":""}